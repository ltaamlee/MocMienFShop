package mocmien.com.service.impl;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import mocmien.com.dto.response.product.ProductListItemResponse;
import mocmien.com.entity.Product;
import mocmien.com.enums.ProductStatus;
import mocmien.com.repository.ProductRepository;
import mocmien.com.service.AdminProductService;

@Service
@RequiredArgsConstructor // T·ª± ƒë·ªông t·∫°o constructor v·ªõi c√°c tr∆∞·ªùng final
public class AdminProductServiceImpl implements AdminProductService {

	// ‚ö†Ô∏è ƒê√£ th√™m t·ª´ kh√≥a 'final' ƒë·ªÉ @RequiredArgsConstructor ho·∫°t ƒë·ªông
	private final ProductRepository productRepo; 
	
    public AdminProductServiceImpl(ProductRepository productRepo) {
		super();
		this.productRepo = productRepo;
	}

	// ----------------------------------------------------
    // H√ÄM TI·ªÜN √çCH: √Ånh x·∫° Entity sang DTO (S·ª≠ d·ª•ng Setter)
    // ----------------------------------------------------
    private ProductListItemResponse toListItemResponse(Product product) {
        ProductListItemResponse response = new ProductListItemResponse();
 
        // G√°n c√°c gi√° tr·ªã c∆° b·∫£n
        response.setId(product.getId());
        response.setProductName(product.getProductName());
        response.setPrice(product.getPrice());
        response.setPromotionalPrice(product.getPromotionalPrice());
        response.setStock(product.getStock());
        response.setIsActive(product.getIsActive());

        // G√°n t√™n Store v√† Category
        response.setStoreName(product.getStore() != null ? product.getStore().getStoreName() : "N/A");
        response.setStoreId(product.getStore().getId());
        response.setCategoryName(product.getCategory() != null ? product.getCategory().getCategoryName() : "N/A");
        
        // -----------------------------------------------------------------
        // üéØ LOGIC M·ªöI: T√åM V√Ä G√ÅN DEFAULT IMAGE URL
        // -----------------------------------------------------------------
        if (product.getImages() != null) {
            // T√¨m ·∫£nh c√≥ isDefault = true v√† l·∫•y URL c·ªßa n√≥
            String defaultImageUrl = product.getImages().stream()
                .filter(img -> img.getIsDefault() != null && img.getIsDefault())
                .findFirst()
                .map(img -> img.getImageUrl())
                .orElse(null); // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y ·∫£nh m·∫∑c ƒë·ªãnh
                
            // G√°n URL ·∫£nh m·∫∑c ƒë·ªãnh
            response.setDefaultImage(defaultImageUrl);
        }
        // -----------------------------------------------------------------
        
        return response;
    }
    
	@Override
	public Page<ProductListItemResponse> listAdmin(
			String keyword, 
			Integer categoryId, 
			Integer storeId,
			ProductStatus status, 
			Pageable pageable) {

		// 1. X√¢y d·ª±ng Specification (B·ªô l·ªçc)
		Specification<Product> spec = Specification.where(null);

		// L·ªçc theo t·ª´ kh√≥a
		if (keyword != null && !keyword.trim().isEmpty()) {
			spec = spec.and((root, query, cb) -> 
				cb.like(cb.lower(root.get("productName")), "%" + keyword.toLowerCase() + "%"));
		}

		// L·ªçc theo Danh m·ª•c
		if (categoryId != null) {
			spec = spec.and((root, query, cb) -> 
				cb.equal(root.get("category").get("id"), categoryId));
		}

		// L·ªçc theo C·ª≠a h√†ng
		if (storeId != null) {
			spec = spec.and((root, query, cb) -> 
				cb.equal(root.get("store").get("id"), storeId));
		}

		// L·ªçc theo Tr·∫°ng th√°i
		if (status != null) {
			spec = spec.and(createStatusSpecification(status));
		}

		// 2. Th·ª±c thi truy v·∫•n
		Page<Product> productPage = productRepo.findAll(spec, pageable);

		// 3. √Ånh x·∫° k·∫øt qu·∫£ sang DTO
		return productPage.map(this::toListItemResponse);
	}

	/**
	 * H√†m ti·ªán √≠ch ƒë·ªÉ t·∫°o Specification d·ª±a tr√™n ProductStatus Enum.
	 */
	private Specification<Product> createStatusSpecification(ProductStatus status) {
		return switch (status) {
			case SELLING -> (root, query, cb) -> cb.and(
				cb.isTrue(root.get("isActive")),
				cb.isTrue(root.get("isSelling")),
				cb.isTrue(root.get("isAvailable"))
			);
			case STOPPED -> (root, query, cb) -> cb.and(
				cb.isTrue(root.get("isActive")),
				cb.isFalse(root.get("isSelling"))
			);
			case OUT_OF_STOCK -> (root, query, cb) -> cb.and(
				cb.isTrue(root.get("isActive")),
				cb.isTrue(root.get("isSelling")),
				cb.isFalse(root.get("isAvailable"))
			);
			default -> Specification.where(null);
		};
	}
}