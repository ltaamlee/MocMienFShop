package mocmien.com.service.impl;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import mocmien.com.entity.CustomerAddress;
import mocmien.com.entity.Delivery;
import mocmien.com.entity.Store;
import mocmien.com.integration.geocoding.GeocodingService;
import mocmien.com.repository.DeliveryRepository;
import mocmien.com.service.ShippingService;
import mocmien.com.util.DistanceUtil;

import java.util.Optional;

@Service
public class ShippingServiceImpl implements ShippingService {

	@Autowired
	private GeocodingService geocodingService;

	@Autowired
	private DeliveryRepository deliveryRepository;

	@Override
	public BigDecimal calculateShippingFee(Store store, CustomerAddress toAddress, int totalWeightGram) {
		// B∆∞·ªõc 1: T√≠nh kho·∫£ng c√°ch
		BigDecimal distance = calculateDistanceKm(store, toAddress);
		
		// N·∫øu kh√¥ng t√≠nh ƒë∆∞·ª£c kho·∫£ng c√°ch, b√°o l·ªói
		if (distance == null) {
			System.err.println("‚ö†Ô∏è WARNING: Kh√¥ng t√≠nh ƒë∆∞·ª£c kho·∫£ng c√°ch.");
			System.err.println("   - Shop: " + (store != null ? store.getStoreName() : "null"));
			System.err.println("   - Shop address: " + (store != null ? store.getAddress() : "null"));
			System.err.println("   - Customer address: " + (toAddress != null ? 
				toAddress.getLine() + ", " + toAddress.getWard() + ", " + toAddress.getDistrict() : "null"));
			
			throw new IllegalArgumentException("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c kho·∫£ng c√°ch. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãa ch·ªâ.");
		}

		System.out.println("üìç Kho·∫£ng c√°ch: " + distance + "km");

		// B∆∞·ªõc 2: T√¨m nh√† v·∫≠n chuy·ªÉn ph√π h·ª£p v·ªõi kho·∫£ng c√°ch
		Integer distanceKm = distance.intValue();
		Optional<Delivery> deliveryOpt = deliveryRepository.findFirstAvailableForDistance(distanceKm);
		
		if (deliveryOpt.isEmpty()) {
			System.err.println("‚ùå Kh√¥ng c√≥ nh√† v·∫≠n chuy·ªÉn n√†o h·ªó tr·ª£ kho·∫£ng c√°ch " + distanceKm + "km");
			throw new IllegalArgumentException(
				"ƒê∆°n h√†ng kh√¥ng √°p d·ª•ng t·∫°i ƒë·ªãa ch·ªâ c·ªßa b·∫°n (kho·∫£ng c√°ch " + distanceKm + 
				"km v∆∞·ª£t qu√° gi·ªõi h·∫°n c·ªßa t·∫•t c·∫£ nh√† v·∫≠n chuy·ªÉn)"
			);
		}

		Delivery delivery = deliveryOpt.get();
		System.out.println("üöö Nh√† v·∫≠n chuy·ªÉn: " + delivery.getDeliveryName());
		System.out.println("   - Ph√≠ c∆° b·∫£n: " + delivery.getBasePrice() + "ƒë");
		System.out.println("   - Gi√°/km: " + delivery.getPricePerKM() + "ƒë");
		System.out.println("   - Max distance: " + delivery.getMaxDistance() + "km");

		// B∆∞·ªõc 3: T√≠nh ph√≠ ship
		// C√¥ng th·ª©c: basePrice + (distance * pricePerKM)
		BigDecimal baseFee = delivery.getBasePrice() != null ? delivery.getBasePrice() : BigDecimal.ZERO;
		BigDecimal pricePerKM = delivery.getPricePerKM() != null ? delivery.getPricePerKM() : BigDecimal.ZERO;
		BigDecimal distanceFee = distance.multiply(pricePerKM);

		BigDecimal totalFee = baseFee.add(distanceFee);

		// L√†m tr√≤n l√™n ngh√¨n
		BigDecimal roundedFee = totalFee.divide(BigDecimal.valueOf(1000), 0, RoundingMode.UP)
				.multiply(BigDecimal.valueOf(1000));

		System.out.println("üí∞ Ph√≠ ship: " + roundedFee + "ƒë (= " + baseFee + " + " + distance + " √ó " + pricePerKM + ")");

		return roundedFee;
	}

	@Override
	public BigDecimal calculateDistanceKm(Store store, CustomerAddress toAddress) {
		if (store == null || toAddress == null) return null;

		// L·∫•y t·ªça ƒë·ªô shop (t·ª± ƒë·ªông geocode n·∫øu ch∆∞a c√≥)
		Double storeLat = store.getLatitude() != null ? store.getLatitude().doubleValue() : null;
		Double storeLon = store.getLongitude() != null ? store.getLongitude().doubleValue() : null;

		if (storeLat == null || storeLon == null) {
			// Th·ª≠ geocode ƒë·ªãa ch·ªâ shop (Store ch·ªâ c√≥ 1 field address duy nh·∫•t)
			String storeAddress = store.getAddress();
			if (storeAddress != null && !storeAddress.trim().isEmpty()) {
				// Th√™m ", Vi·ªát Nam" ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
				storeAddress = storeAddress + ", Vi·ªát Nam";
			}
			Map<String, Double> storeCoords = geocodingService.geocodeAddress(storeAddress);
			if (storeCoords != null) {
				storeLat = storeCoords.get("latitude");
				storeLon = storeCoords.get("longitude");
				// C√≥ th·ªÉ l∆∞u l·∫°i v√†o DB ƒë·ªÉ l·∫ßn sau kh√¥ng ph·∫£i geocode n·ªØa
				// store.setLatitude(BigDecimal.valueOf(storeLat));
				// store.setLongitude(BigDecimal.valueOf(storeLon));
			} else {
				return null; // Kh√¥ng t√¨m ƒë∆∞·ª£c t·ªça ƒë·ªô shop
			}
		}

		// L·∫•y t·ªça ƒë·ªô ƒë·ªãa ch·ªâ kh√°ch h√†ng (t·ª± ƒë·ªông geocode n·∫øu ch∆∞a c√≥)
		Double customerLat = toAddress.getLatitude() != null ? toAddress.getLatitude().doubleValue() : null;
		Double customerLon = toAddress.getLongitude() != null ? toAddress.getLongitude().doubleValue() : null;

		if (customerLat == null || customerLon == null) {
			// Th·ª≠ geocode ƒë·ªãa ch·ªâ kh√°ch h√†ng (line, ward, district, province)
			String customerAddress = geocodingService.buildFullAddress(
				toAddress.getLine(),       // s·ªë nh√†
				toAddress.getWard(),       // ph∆∞·ªùng/x√£
				toAddress.getDistrict(),   // huy·ªán
				toAddress.getProvince()    // t·ªânh/th√†nh ph·ªë
			);
			Map<String, Double> customerCoords = geocodingService.geocodeAddress(customerAddress);
			if (customerCoords != null) {
				customerLat = customerCoords.get("latitude");
				customerLon = customerCoords.get("longitude");
				// C√≥ th·ªÉ l∆∞u l·∫°i v√†o DB
				// toAddress.setLatitude(BigDecimal.valueOf(customerLat));
				// toAddress.setLongitude(BigDecimal.valueOf(customerLon));
			} else {
				return null; // Kh√¥ng t√¨m ƒë∆∞·ª£c t·ªça ƒë·ªô kh√°ch h√†ng
			}
		}

		// T√≠nh kho·∫£ng c√°ch b·∫±ng DistanceUtil (Haversine formula)
		double distanceKm = DistanceUtil.calculateDistance(storeLat, storeLon, customerLat, customerLon);
		return BigDecimal.valueOf(distanceKm).setScale(2, RoundingMode.HALF_UP);
	}

	@Override
	public Delivery findDeliveryForDistance(Store store, CustomerAddress toAddress) {
		// T√≠nh kho·∫£ng c√°ch
		BigDecimal distance = calculateDistanceKm(store, toAddress);
		
		if (distance == null) {
			return null;
		}

		// T√¨m delivery ph√π h·ª£p
		Integer distanceKm = distance.intValue();
		return deliveryRepository.findFirstAvailableForDistance(distanceKm).orElse(null);
	}
}
