package mocmien.com.controller.admin;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import jakarta.transaction.Transactional;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import mocmien.com.dto.request.product.ProductUpdateRequest; // D√πng l·∫°i DTO c·ªßa Vendor
import mocmien.com.dto.response.product.ProductDetailResponse;
import mocmien.com.dto.response.product.ProductListItemResponse;
import mocmien.com.entity.Product;
import mocmien.com.enums.ProductStatus;
import mocmien.com.repository.CategoryRepository;
import mocmien.com.repository.ProductRepository;
import mocmien.com.service.ProductService; // Gi·∫£ ƒë·ªãnh Service c√≥ c√°c ph∆∞∆°ng th·ª©c cho Admin

@RestController
@RequestMapping("/api/admin/products") // ƒê·ªïi path ƒë·ªÉ tr√°nh tr√πng
@PreAuthorize("hasRole('ADMIN')") // Ch·ªâ Admin m·ªõi c√≥ th·ªÉ truy c·∫≠p
@RequiredArgsConstructor
public class AdminProductController {

	private final ProductRepository productRepo;
    private final CategoryRepository categoryRepo;
    private final ProductService queryService;
    
    
    
    public AdminProductController(ProductRepository productRepo, CategoryRepository categoryRepo,
			ProductService queryService) {
		super();
		this.productRepo = productRepo;
		this.categoryRepo = categoryRepo;
		this.queryService = queryService;
	}

    public static record SimpleCategory(Integer id, String categoryName) {}
    
    @GetMapping(value = "/categories", produces = "application/json")
	public List<SimpleCategory> categories(@RequestParam(defaultValue = "true") boolean active) {
		var list = active ? categoryRepo.findByIsActiveTrueOrderByCategoryNameAsc() : categoryRepo.findAll();
		return list.stream().map(c -> new SimpleCategory(c.getId(), c.getCategoryName())).toList();
	}
    
    // ----------------------------------------------------
    // 1. LIST S·∫¢N PH·∫®M (T·∫•t c·∫£ shops, c√≥ l·ªçc)
    // ----------------------------------------------------
    @GetMapping
    public Page<ProductListItemResponse> list(
            @RequestParam(defaultValue = "") String keyword,
            @RequestParam(required = false) Integer categoryId,
            @RequestParam(required = false) Integer storeId, // üí° Th√™m tham s·ªë l·ªçc theo Shop
            @RequestParam(required = false) ProductStatus status,
            @RequestParam(defaultValue = "0") int page, 
            @RequestParam(defaultValue = "10") int size) {
        
        // S·∫Øp x·∫øp m·∫∑c ƒë·ªãnh: updated/created
        Pageable pageable = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "updatedAt", "createdAt"));

        // Gi·∫£ ƒë·ªãnh ProductService c√≥ ph∆∞∆°ng th·ª©c listAdmin ƒë·ªÉ x·ª≠ l√Ω logic l·ªçc ph·ª©c t·∫°p n√†y
        return queryService.listAdmin(keyword, categoryId, storeId, status, pageable);
    }
    
    // ----------------------------------------------------
    // 2. DETAIL (Xem chi ti·∫øt s·∫£n ph·∫©m c·ªßa b·∫•t k·ª≥ shop n√†o)
    // ----------------------------------------------------
    @GetMapping("/{id}")
    public ProductDetailResponse detail(@PathVariable Integer id) {
        // T√°i s·ª≠ d·ª•ng detail c·ªßa Service v√¨ n√≥ kh√¥ng ph·ª• thu·ªôc v√†o Store
        return queryService.detail(id); 
    }
    
    // ----------------------------------------------------
    // 3. C·∫¨P NH·∫¨T (Ch·ªânh s·ª≠a s·∫£n ph·∫©m c·ªßa b·∫•t k·ª≥ shop n√†o)
    // ----------------------------------------------------
    /**
     * Admin c√≥ th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m (ch√∫ √Ω: Admin KH√îNG ƒë∆∞·ª£c ƒë·ªïi StoreId)
     */
    @PutMapping("/{id}")
    @Transactional
    public ResponseEntity<?> update(@PathVariable Integer id, @Valid @RequestBody ProductUpdateRequest req) {
        // Admin ch·ªâ c·∫ßn ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i v√† c√≥ th·ªÉ c·∫≠p nh·∫≠t
        var p = productRepo.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ ID: " + id));
        
        var cat = categoryRepo.findById(req.getCategoryId())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y danh m·ª•c"));

        // Gi·ªØ nguy√™n Store
        p.setCategory(cat);
        p.setProductName(req.getProductName());
        // T√°i s·ª≠ d·ª•ng slugify helper t·ª´ Controller Vendor (c·∫ßn ƒë∆∞·ª£c chuy·ªÉn th√†nh ti·ªán √≠ch chung)
        // Hi·ªán t·∫°i, ta s·∫Ω gi·∫£ ƒë·ªãnh slugify v√† uniqueSlug ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o Service ho·∫∑c ti·ªán √≠ch chung.
        // T·∫°m th·ªùi b·ªè qua logic slugify ph·ª©c t·∫°p ƒë·ªÉ code Admin ƒë∆°n gi·∫£n h∆°n.
        
        p.setPrice(req.getPrice());
        p.setPromotionalPrice(req.getPrice()); // Gi·ªØ nguy√™n logic auto-set
        p.setSize(req.getSize());
        p.setStock(req.getStock());
        if (req.getIsActive() != null)
            p.setIsActive(req.getIsActive());
        
        // üí° Gi·∫£ ƒë·ªãnh logic applyStatusFlags ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o Service
        if (req.getStatus() != null)
            queryService.applyStatusFlags(p, req.getStatus(), req.getStock());
        
        // Logic x·ª≠ l√Ω h√¨nh ·∫£nh (c√≥ th·ªÉ g·ªçi Service x·ª≠ l√Ω ƒë·ªÉ tr√°nh code l·∫∑p)
        if (req.getImageUrls() != null) {
		    queryService.updateProductImages(p, req.getImageUrls()); // üí° Gi·∫£ ƒë·ªãnh Service c√≥ ph∆∞∆°ng th·ª©c n√†y
		}

        productRepo.save(p);
        return ResponseEntity.ok(queryService.detail(p.getId()));
    }
    
    // ----------------------------------------------------
    // 4. X√ìA (X√≥a s·∫£n ph·∫©m c·ªßa b·∫•t k·ª≥ shop n√†o)
    // ----------------------------------------------------
    @DeleteMapping("/{id}")
    @Transactional
    public ResponseEntity<Void> delete(@PathVariable Integer id) {
        // Ki·ªÉm tra t·ªìn t·∫°i tr∆∞·ªõc khi x√≥a
        if (!productRepo.existsById(id)) {
            throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ ID: " + id);
        }
        productRepo.deleteById(id);
        return ResponseEntity.noContent().build();
    }
    
    // üí° Ghi ch√∫: C·∫ßn c·∫≠p nh·∫≠t ProductService ƒë·ªÉ th√™m listAdmin, applyStatusFlags, v√† updateProductImages.
    
    @RestControllerAdvice
    public class AdminProductApiExceptionHandler {
        @ExceptionHandler(Exception.class)
        public ResponseEntity<String> handle(Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }
}