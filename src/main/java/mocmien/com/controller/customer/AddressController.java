package mocmien.com.controller.customer;

import mocmien.com.entity.CustomerAddress;
import mocmien.com.entity.User;
import mocmien.com.entity.UserProfile;
import mocmien.com.service.CustomerAddressService;
import mocmien.com.service.UserProfileService;
import mocmien.com.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;
import java.util.List;

@Controller
@RequestMapping("/account/address")
public class AddressController {

    @Autowired
    private CustomerAddressService addressService;

    @Autowired
    private UserService userService;

    @Autowired
    private UserProfileService userProfileService;

    /* ===============================================
       üè† 1Ô∏è‚É£ Hi·ªÉn th·ªã danh s√°ch ƒë·ªãa ch·ªâ c·ªßa ng∆∞·ªùi d√πng
    =============================================== */
    @GetMapping
    public String listAddresses(Model model, Principal principal) {
        if (principal == null) return "redirect:/login";

        String username = principal.getName();
        User user = userService.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        // L·∫•y ho·∫∑c t·∫°o h·ªì s∆° ng∆∞·ªùi d√πng
        UserProfile profile = user.getUserProfile();
        if (profile == null) {
            profile = userProfileService.findByUser(user).orElse(null);
            if (profile == null) {
                profile = new UserProfile();
                profile.setUser(user);
                user.setUserProfile(profile);
                userProfileService.save(profile);
            }
        }

        List<CustomerAddress> addresses = addressService.findByCustomer(profile);

        model.addAttribute("user", user);
        model.addAttribute("userProfile", profile);
        model.addAttribute("addresses", addresses);
        
        System.out.println("üîπ User: " + username);
        System.out.println("üîπ Profile ID: " + profile.getId());
        System.out.println("üîπ S·ªë ƒë·ªãa ch·ªâ t√¨m th·∫•y: " + addresses.size());

        return "customer/account-address";
    }


    /* ===============================================
       ‚úèÔ∏è 2Ô∏è‚É£ Th√™m ho·∫∑c c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ
    =============================================== */
    @PostMapping("/save")
    public String saveAddress(@ModelAttribute CustomerAddress address, Principal principal) {
        if (principal == null) return "redirect:/login";

        String username = principal.getName();
        User user = userService.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        UserProfile profile = user.getUserProfile();
        if (profile == null) {
            profile = new UserProfile();
            profile.setUser(user);
            user.setUserProfile(profile);
            userProfileService.save(profile);
        }

        address.setCustomer(profile);

        // N·∫øu l√† ƒë·ªãa ch·ªâ ƒë·∫ßu ti√™n ‚Üí ƒë·∫∑t m·∫∑c ƒë·ªãnh
        if (addressService.findByCustomer(profile).isEmpty()) {
            address.setIsDefault(true);
        }

        addressService.save(address);
        return "redirect:/account/address";
    }


    /* ===============================================
       üóëÔ∏è 3Ô∏è‚É£ X√≥a ƒë·ªãa ch·ªâ
    =============================================== */
    @GetMapping("/delete/{id}")
    public String deleteAddress(@PathVariable("id") Integer id) {
        addressService.delete(id);
        return "redirect:/account/address";
    }

    /* ===============================================
       üåü 4Ô∏è‚É£ ƒê·∫∑t l√†m m·∫∑c ƒë·ªãnh
    =============================================== */
    @GetMapping("/set-default/{id}")
    public String setDefault(@PathVariable("id") Integer id, Principal principal) {
        if (principal == null) return "redirect:/login";

        String username = principal.getName();
        User user = userService.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));
        UserProfile profile = user.getUserProfile();

        if (profile != null) {
            addressService.setDefault(id, profile);
        }
        return "redirect:/account/address";
    }
    
    @PostMapping("/add-ajax")
    @ResponseBody
    public CustomerAddress addAddressAjax(@ModelAttribute CustomerAddress address, Principal principal) {
        if (principal == null) throw new RuntimeException("Ch∆∞a ƒëƒÉng nh·∫≠p!");

        String username = principal.getName();
        User user = userService.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));
        UserProfile profile = user.getUserProfile();
        if (profile == null) {
            profile = new UserProfile();
            profile.setUser(user);
            user.setUserProfile(profile);
            userProfileService.save(profile);
        }

        address.setCustomer(profile);

        // N·∫øu l√† ƒë·ªãa ch·ªâ ƒë·∫ßu ti√™n th√¨ ƒë·∫∑t m·∫∑c ƒë·ªãnh
        if (addressService.findByCustomer(profile).isEmpty()) {
            address.setIsDefault(true);
        }

        return addressService.save(address);
    }

}
