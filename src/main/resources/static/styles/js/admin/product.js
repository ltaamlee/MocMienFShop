/* ==========================
   BI·∫æN TO√ÄN C·ª§C V√Ä DOM ELEMENTS
========================== */
let prodCurrentPage = 0;
const prodPageSize = 10;

const prodTbody = document.getElementById('productTableBody');
const prodPagination = document.getElementById('productPagination');

/* ==========================
   T·∫¢I D·ªÆ LI·ªÜU V√Ä RENDER
========================== */

/**
 * T·∫£i danh s√°ch s·∫£n ph·∫©m t·ª´ API d·ª±a tr√™n b·ªô l·ªçc v√† ph√¢n trang
 */
async function loadProducts(page = 0) {
	prodCurrentPage = page;
	
	// L·∫•y gi√° tr·ªã t·ª´ c√°c b·ªô l·ªçc
	const keyword = document.querySelector('#searchFilterForm input[name="keyword"]')?.value || '';
	const categoryId = document.getElementById('categoryFilter')?.value || '';
	const storeId = document.getElementById('storeFilter')?.value || '';
	const status = document.getElementById('statusFilter')?.value || '';

	// X√¢y d·ª±ng parameters
	const params = new URLSearchParams({ page, size: prodPageSize });
	if (keyword) params.append('keyword', keyword);
	if (categoryId) params.append('categoryId', categoryId);
	if (storeId) params.append('storeId', storeId);
	if (status) params.append('status', status);

	try {
		const res = await fetch(`/api/admin/product?${params.toString()}`);
		if (!res.ok) {
			const errorText = await res.text();
			throw new Error(errorText || 'L·ªói t·∫£i danh s√°ch');
		}
		
		const data = await res.json();
		renderProductTable(data.content);
		renderProductPagination(data); // <-- S·ª≠ d·ª•ng h√†m ph√¢n trang n√¢ng cao
		
	} catch (error) {
		console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m:", error.message);
		if (prodTbody) prodTbody.innerHTML = `<tr><td colspan="8" class="text-center">L·ªói: ${error.message}</td></tr>`;
	}
}

/**
 * Hi·ªÉn th·ªã d·ªØ li·ªáu s·∫£n ph·∫©m l√™n b·∫£ng
 */
function renderProductTable(items) {
	if (!prodTbody) return;
	prodTbody.innerHTML = '';
	
	if (!items || items.length === 0) {
		prodTbody.innerHTML = `<tr><td colspan="8" class="text-center">Kh√¥ng c√≥ d·ªØ li·ªáu</td></tr>`;
		return;
	}
	
	items.forEach(p => {
		const tr = document.createElement('tr');
		
		// üåü S·ª¨A L·ªñI LOGIC: D√πng p.status cho tr·∫°ng th√°i, kh√¥ng ph·∫£i p.isActive
		// (Backend c·ªßa b·∫°n c√≥ v·∫ª tr·∫£ v·ªÅ p.status qua AdminProductServiceImpl)
		// Tuy nhi√™n, n·∫øu b·∫°n mu·ªën hi·ªÉn th·ªã 'Active'/'Inactive' d·ª±a tr√™n p.isActive, h√£y d√πng n√≥.
		// T·∫°m th·ªùi d√πng p.status nh∆∞ code g·ªëc:
		const statusText = p.status ? escapeHTML(p.status) : (p.isActive ? 'Active' : 'Inactive');
		
		// üåü LOGIC ·∫¢NH: S·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh (placeholder) n·∫øu p.defaultImage l√† null
		const imageUrl = p.defaultImage || '/images/default-placeholder.png'; // <-- ƒê·ªïi th√†nh ƒë∆∞·ªùng d·∫´n ·∫£nh m·∫∑c ƒë·ªãnh c·ªßa b·∫°n
		
		tr.innerHTML = `
            <td>
				<img src="${imageUrl}" style="width:128px;height:128px;object-fit:cover;border-radius:8px">
			</td>
            <td>${escapeHTML(p.productName || '')}</td>
            <td>${escapeHTML(p.storeName || '')}</td>
            <td>${escapeHTML(p.categoryName || '')}</td>
            <td>${p.price != null ? p.price.toLocaleString('vi-VN') + ' VNƒê' : ''}</td>
            <td>${p.stock != null ? p.stock : ''}</td>
            <td>${statusText}</td>
            <td class="text-right">
                <button class="btn-ban" data-id="${p.id}">C·∫•m</button>
                <button class="btn-unban" data-id="${p.id}">B·ªè c·∫•m</button>
            </td>
        `;
		prodTbody.appendChild(tr);
	});
}

/* ==========================
   H√ÄM PH√ÇN TRANG N√ÇNG CAO
========================== */

/**
 * Hi·ªÉn th·ªã thanh ph√¢n trang (Logic gi·ªëng file Khuy·∫øn m√£i)
 */
function renderProductPagination(data) {
	if (!prodPagination) return;
	prodPagination.innerHTML = ""; // X√≥a n·ªôi dung c≈©

	const totalPages = Math.max(1, data.totalPages);
	const currentPage = data.number;

	// Kh√¥ng hi·ªÉn th·ªã n·∫øu ch·ªâ c√≥ 1 trang
	if (totalPages <= 1) return;

	// N√∫t Previous (Tr∆∞·ªõc)
	const prevLink = document.createElement("a");
	prevLink.innerHTML = '&laquo; Tr∆∞·ªõc';
	prevLink.href = "#";
	if (currentPage === 0) {
		prevLink.classList.add("disabled");
	} else {
		prevLink.addEventListener("click", (e) => {
			e.preventDefault();
			loadProducts(currentPage - 1);
		});
	}
	prodPagination.appendChild(prevLink);

	// Logic hi·ªÉn th·ªã c√°c s·ªë trang
	const maxVisible = 7;
	if (totalPages <= maxVisible) {
		// Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c trang
		for (let i = 0; i < totalPages; i++) {
			addProdPageLink(prodPagination, i, currentPage);
		}
	} else {
		// Hi·ªÉn th·ªã logic c√≥ d·∫•u "..."
		addProdPageLink(prodPagination, 0, currentPage); // Lu√¥n hi·ªÉn th·ªã trang 1
		
		if (currentPage > 3) addProdDots(prodPagination);

		let start = Math.max(1, currentPage - 2);
		let end = Math.min(totalPages - 2, currentPage + 2);

		if (currentPage < 3) end = Math.min(totalPages - 2, 4);
		else if (currentPage > totalPages - 4) start = Math.max(1, totalPages - 5);

		for (let i = start; i <= end; i++) {
			addProdPageLink(prodPagination, i, currentPage);
		}

		if (currentPage < totalPages - 4) addProdDots(prodPagination);
		
		addProdPageLink(prodPagination, totalPages - 1, currentPage); // Lu√¥n hi·ªÉn th·ªã trang cu·ªëi
	}

	// N√∫t Next (Sau)
	const nextLink = document.createElement("a");
	nextLink.innerHTML = 'Sau &raquo;';
	nextLink.href = "#";
	if (currentPage === totalPages - 1) {
		nextLink.classList.add("disabled");
	} else {
		nextLink.addEventListener("click", (e) => {
			e.preventDefault();
			loadProducts(currentPage + 1);
		});
	}
	prodPagination.appendChild(nextLink);
}

/**
 * H√†m ti·ªán √≠ch: Th√™m m·ªôt li√™n k·∫øt trang (s·ªë)
 */
function addProdPageLink(container, pageIndex, currentPage) {
	const link = document.createElement("a");
	link.textContent = pageIndex + 1;
	link.href = "#";
	if (pageIndex === currentPage) link.classList.add("active");
	
	link.addEventListener("click", (e) => {
		e.preventDefault();
		if (pageIndex !== currentPage) loadProducts(pageIndex);
	});
	container.appendChild(link);
}

/**
 * H√†m ti·ªán √≠ch: Th√™m d·∫•u "..."
 */
function addProdDots(container) {
	const dots = document.createElement("span");
	dots.textContent = "...";
	dots.classList.add("pagination-dots");
	container.appendChild(dots);
}


/* ==========================
   H√ÄNH ƒê·ªòNG (BAN/UNBAN)
========================== */

/**
 * C·∫•m s·∫£n ph·∫©m
 */
async function banProduct(id) {
	if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën c·∫•m s·∫£n ph·∫©m n√†y?')) return;
	try {
		const res = await fetch(`/api/admin/product/${id}/ban`, { method: 'PATCH' });
		if (!res.ok) {
			const errorText = await res.text();
			throw new Error(errorText || 'H√†nh ƒë·ªông th·∫•t b·∫°i');
		}
		loadProducts(prodCurrentPage); // T·∫£i l·∫°i trang hi·ªán t·∫°i
	} catch (error) {
		alert(`L·ªói: ${error.message}`);
	}
}

/**
 * B·ªè c·∫•m s·∫£n ph·∫©m
 */
async function unbanProduct(id) {
	if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën b·ªè c·∫•m s·∫£n ph·∫©m n√†y?')) return;
	try {
		const res = await fetch(`/api/admin/product/${id}/unban`, { method: 'PATCH' });
		if (!res.ok) {
			const errorText = await res.text();
			throw new Error(errorText || 'H√†nh ƒë·ªông th·∫•t b·∫°i');
		}
		loadProducts(prodCurrentPage); // T·∫£i l·∫°i trang hi·ªán t·∫°i
	} catch (error) {
		alert(`L·ªói: ${error.message}`);
	}
}

/* ==========================
   H√ÄM TI·ªÜN √çCH (HELPERS)
========================== */

/**
 * Ch·ªëng XSS: Tho√°t c√°c k√Ω t·ª± HTML ƒë·∫∑c bi·ªát
 */
function escapeHTML(str) {
	if (!str) return '';
	return String(str).replace(/[&<>"']/g, m => ({ 
		'&': '&amp;', 
		'<': '&lt;', 
		'>': '&gt;', 
		'"': '&quot;', 
		'\'': '&#39;' 
	}[m]));
}

/* ==========================
   L·∫ÆNG NGHE S·ª∞ KI·ªÜN
========================== */

document.addEventListener('DOMContentLoaded', () => {
	
	// T·∫£i s·∫£n ph·∫©m l·∫ßn ƒë·∫ßu
	loadProducts(0);

	// L·∫Øng nghe s·ª± ki·ªán submit form b·ªô l·ªçc
	document.getElementById('searchFilterForm')?.addEventListener('submit', e => { 
		e.preventDefault(); 
		loadProducts(0); // Lu√¥n v·ªÅ trang 0 khi t√¨m ki·∫øm
	});

	// L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi c√°c b·ªô l·ªçc <select>
	['categoryFilter', 'storeFilter', 'statusFilter'].forEach(id => {
		document.getElementById(id)?.addEventListener('change', () => {
			loadProducts(0); // Lu√¥n v·ªÅ trang 0 khi ƒë·ªïi b·ªô l·ªçc
		});
	});

	// L·∫Øng nghe s·ª± ki·ªán click tr√™n b·∫£ng (Event Delegation)
	prodTbody?.addEventListener('click', e => {
		const banBtn = e.target.closest('.btn-ban');
		const unbanBtn = e.target.closest('.btn-unban');
		
		if (banBtn) { 
			e.preventDefault(); 
			banProduct(banBtn.dataset.id); 
		}
		
		if (unbanBtn) { 
			e.preventDefault(); 
			unbanProduct(unbanBtn.dataset.id); 
		}
	});
});